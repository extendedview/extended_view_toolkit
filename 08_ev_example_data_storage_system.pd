#N canvas 23 22 791 756 10;
#X declare -path . -path .. -path data -path ../data -path ev-in -path
../ev-in -path ev-main -path ../ev-main -path ev-pano -path ../ev-pano
-path ev-pro -path ../ev-pro -path libs/gil -path ../libs/gil -path
libs/kollabs -path ../libs/kollabs -path media -path ../media -path
ev-glsl -path ../ev-glsl;
#X obj 14 14 cnv 15 750 30 empty empty Example:_data_storage_system
20 12 0 14 -233017 -66577 0;
#X obj 14 157 cnv 15 750 150 empty empty a_simple_patch 20 12 0 14
-262130 -66577 0;
#X obj 33 190 gemhead 50;
#X obj 14 1127 cnv 15 750 215 empty empty Registering_variables 20
12 0 14 -204800 -66577 0;
#X obj 14 315 cnv 15 750 170 empty empty DATA_STORAGE_SYSTEM 20 12
0 14 -232576 -66577 0;
#X obj 249 206 ev_gemwin;
#X obj 219 331 ev_storage;
#X obj 33 229 ev_pro_22easy projection;
#X obj 14 839 cnv 15 750 280 empty empty INITIALIZE 20 12 0 14 -261234
-66577 0;
#N canvas 579 25 509 161 init 0;
#X obj 44 -23 cnv 15 400 100 empty empty IMPORTANT 20 12 0 14 -261234
-66577 0;
#X text 49 -3 Such a declare object should always be in the main patch
of your project \, to set the pathes to the abstractions.;
#X obj 158 43 ev-main/ev_declare;
#X restore 555 169 pd init;
#X text 477 14 (c)2012 Peter Venus & Marian Weger \; /part of EXTENDED
VIEW toolkit/ gpl v3;
#X obj 177 1297 ds_reg 0 /i/am/a/variable;
#X obj 177 1319 ds_reg 0 /i/am/also/a/variable;
#X obj 180 1241 hsl 128 15 0 127 0 0 /i/am/also/a/variable /i/am/also/a/variable
/i/am/also/a/variable -2 -8 0 10 -262144 -1 -1 200 1;
#X text 397 384 This example uses "ev_example_data_storage_system.txt".
;
#X obj 251 881 loadbang;
#X obj 231 881 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 251 905 del 1000;
#X msg 251 1077 \; /ds/0/scene 0 \;;
#X text 396 847 If you want the storage to recall a scene from a textfile
on startup \, you can specify it as follows:;
#X text 396 942 use the "/<domain>/ds/loadfile" message to load a given
file path:;
#X text 396 900 Delay the load by one second to make sure that the
patch got fully loaded.;
#X obj 251 927 t b b;
#X obj 251 1035 del 2000;
#X text 396 1033 Delay the recall by two seconds to make sure that
the textfile got fully loaded to RAM.;
#X text 396 1078 Recall scene "0".;
#X text 324 905 <--------;
#X text 324 1037 <--------;
#X text 352 1077 <----;
#X obj 14 492 cnv 15 750 340 empty empty CONTROLS 20 12 0 14 -232576
-66577 0;
#X obj 242 517 nbx 3 15 0 999 0 0 /ds/0/scene/current /ds/0/scene/current
scene 0 -8 0 12 -204786 -1 -1 0 256;
#X obj 223 517 bng 15 250 50 0 /ds/0/scene/current/prev /ds/0/scene/current/prev
< 4 7 0 10 -204786 -1 -1;
#X obj 293 517 bng 15 250 50 0 /ds/0/scene/current/next /ds/0/scene/current/next
> 5 7 0 10 -204786 -1 -1;
#X obj 316 517 bng 15 250 50 0 /ds/0/recall /ds/0/recall recall 17
7 0 10 -4034 -1 -1;
#X obj 14 1349 cnv 15 750 90 empty empty Access_controls_from_"outside"
20 12 0 14 -204786 -66577 0;
#X msg 299 1363 0;
#X msg 329 1363 1;
#X msg 359 1363 2;
#X obj 299 1405 s /ds/0/scene;
#X obj 225 678 bng 15 250 50 0 /ds/0/save /ds/0/save save 17 7 0 10
-258113 -1 -1;
#X obj 225 742 bng 15 250 50 0 /\$1/ds/load /\$1/ds/load load 17 7
0 10 -4034 -1 -1;
#X obj 295 678 bng 15 250 50 0 /ds/0/resave /ds/0/resave resave 17
7 0 10 -258113 -1 -1;
#X obj 295 742 bng 15 250 50 0 /\$1/ds/reload /\$1/ds/reload reload
17 7 0 10 -4034 -1 -1;
#X obj 315 601 bng 15 250 50 0 /ds/0/store /ds/0/store store 17 7 0
10 -258113 -1 -1;
#X obj 242 601 nbx 3 15 0 999 0 0 /ds/0/scene/selected /ds/0/scene/selected
empty 0 -8 0 12 -261234 -1 -1 0 256;
#X obj 223 601 bng 15 250 50 0 /ds/0/scene/selected/prev /ds/0/scene/selected/prev
< 4 7 0 10 -261234 -1 -1;
#X obj 293 601 bng 15 250 50 0 /ds/0/scene/selected/next /ds/0/scene/selected/next
> 5 7 0 10 -261234 -1 -1;
#X text 396 666 The SAVE section lets you save all scenes from RAM
to a textfile on the HDD. Click "save" to open a save dialog. "resave"
will let you save to the last specified filename.;
#X text 396 516 In the RECALL section \, you can recall a scene from
RAM.;
#X text 396 1362 Change scene by clicking these message boxes;
#X text 396 1206 New variables can be registered to a storage by the
[ds_reg] module.;
#X text 396 1246 SYNTAX: [ds_reg <domain> <variable_name>] \, where
<domain> is the name of the storage you want to register to \, and
<variable_name> is the complete name of your variable.;
#X obj 177 1193 nbx 5 14 -1e+37 1e+37 0 0 /i/am/a/variable /i/am/a/variable
/i/am/a/variable 0 -8 0 10 -262144 -1 -1 1 256;
#X text 372 1294 <-- this registers "/i/am/a/variable" to domain "0"
;
#X text 372 1320 <-- this registers "/i/am/also/a/variable" to domain
"0";
#X text 612 223 <-- Click here to start!;
#X text 396 596 In the STORE section \, you can store the current state
of the patch into RAM. Select a destination scene and press "store".
Note: The stored information gets lost when you close PD. You must
first save it...;
#X text 221 807 The advanced options get explained in another example.
;
#X obj 14 1445 cnv 15 750 25 empty empty More_information_can_be_found_in_"ev_storage-help"
20 12 0 14 -261234 -258113 0;
#X msg 278 975 \; /ds/0/loadfile ../../data/ev_example_data_storage_system.txt
;
#X text 374 1009 (pathes relative to "./libs/kollabs");
#X obj 14 50 cnv 15 750 100 empty empty General 20 12 0 14 -204800
-66577 0;
#X text 129 59 All the modules of "Extended View Toolkit" are connected
to a scene based state-saving system. It is possible to save different
states of your patch to a textfile \, and restore them at any time.
;
#X text 129 117 This example shows the basic functionality of the storage
system.;
#X text 397 340 Presets are usually located in the "./data" folder
\, but can be anywhere on the harddrive.;
#X text 396 546 Switch between presets 0-2 to see the effect. Scenes
above 2 are empty in this example and will print you an error message
to the console \, if recalled.;
#X text 396 736 The LOAD section lets you load all scenes from a textfile
to RAM. Click "load" to open a load dialog. "reload" will let you load
the last specified filename. To see any effect \, after loading \,
you need to recall a scene.;
#X text 396 1135 [ev_storage] can take a creation argument. This lets
you choose a name for this particular storage "domain". If no creation
argument is specified \, it is automatically set to domain "0". To
register new variables \, you must specify \, which domain you want
to register them to.;
#X text 397 1404 A list of accessable parameters can be found in [ev_storage-help].
;
#X connect 2 0 7 0;
#X connect 15 0 17 0;
#X connect 16 0 17 0;
#X connect 17 0 22 0;
#X connect 22 0 23 0;
#X connect 22 1 59 0;
#X connect 23 0 18 0;
#X connect 35 0 38 0;
#X connect 36 0 38 0;
#X connect 37 0 38 0;
#X coords 0 0 1 1 85 60 0;
